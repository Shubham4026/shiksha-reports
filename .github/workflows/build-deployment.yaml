name: Multi-Stage Deployment Workflow

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to Deploy (dev, qa, prod)'
        required: true
        default: 'dev'
      tag:
        description: 'Docker Image Tag to Deploy'
        required: true

jobs:
  # Job to Build Docker Image
  build-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set TAG environment variable
        run: echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Debug TAG value
        run: echo "TAG value - ${{ env.TAG }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION_NAME }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ env.TAG }}
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:${{ env.TAG }} .
          docker push ${{ secrets.ECR_REPOSITORY }}:${{ env.TAG }}

  # Job for Deploying to Dev
  deploy-dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    if: ${{ inputs.environment == 'dev' }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Deploy Stack to Dev
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_NAME }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd ${{ secrets.TARGET_DIR_DEV }}
            if [ -f .env ]; then
              rm .env
            fi
            echo '${{ secrets.DEV_ENV }}' > .env
            ./deploy.sh ${{ inputs.tag }}

  # Job for Deploying to QA
  deploy-qa:
    name: Deploy to QA
    runs-on: ubuntu-latest
    if: ${{ inputs.environment == 'qa' }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION_NAME }}

      - name: Create manifest directory if not exists
        run: mkdir -p manifest

      - name: Copy .env file
        env:
          QA_ENV_FILE_CONTENT: ${{ secrets.ENV_CONTENT_QA }}
        run: echo "$QA_ENV_FILE_CONTENT" > manifest/configmap.yaml

      - name: Deploy to QA EKS
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ inputs.tag }}
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME_QA }} --region ${{ secrets.AWS_REGION_NAME }}
          envsubst < manifest/shiksha-reports.yaml > manifest/shiksha-reports-updated.yaml
          kubectl apply -f manifest/shiksha-reports-updated.yaml
          kubectl apply -f manifest/configmap.yaml
          sleep 10
          kubectl get pods | grep shiksha-reports

  # Job for Deploying to Prod
  deploy-prod:
    name: Deploy to Prod
    runs-on: ubuntu-latest
    if: ${{ inputs.environment == 'prod' }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION_NAME }}

      - name: Create manifest directory if not exists
        run: mkdir -p manifest

      - name: Copy .env file
        env:
          PROD_ENV_FILE_CONTENT: ${{ secrets.ENV_CONTENT_PROD }}
        run: echo "$PROD_ENV_FILE_CONTENT" > manifest/configmap.yaml

      - name: Deploy to Prod EKS
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ inputs.tag }}
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME_PROD }} --region ${{ secrets.AWS_REGION_NAME }}
          envsubst < manifest/shiksha-reports.yaml > manifest/shiksha-reports-updated.yaml
          kubectl apply -f manifest/shiksha-reports-updated.yaml
          kubectl apply -f manifest/configmap.yaml
          sleep 10
          kubectl get pods | grep shiksha-reports
